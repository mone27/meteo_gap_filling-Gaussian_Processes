# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_Imputation.ipynb.

# %% auto 0
__all__ = ['GPFAFakeData', 'GPFAImputation']

# %% ../nbs/02_Imputation.ipynb 7
class GPFAFakeData:
    def __init__(self,
                    n_features: int,
                    n_obs: int,
                    latent_func = torch.sin, # Functions used to generate the true latent
                    noise_std = .2,
                    Lambda = None
                ):
        
        self.n_features, self.n_obs = n_features, n_obs
        self.T = torch.arange(n_obs)
        
        self.latent = latent_func(self.T)
        
        self.Lambda = torch.tensor(Lambda).reshape(n_features, 1) if Lambda is not None else torch.rand(n_features, 1)
        
        self.exact_X = (self.Lambda * self.latent).T
        
        self.X =  self.exact_X + torch.normal(0., noise_std, size = (n_obs, n_features)) 
        

# %% ../nbs/02_Imputation.ipynb 31
class GPFAImputation:
    def __init__(
        self,
        data: pd.DataFrame , #observed data with gaps due to missing data. Columns "T" is the time
        T # vector of time where the data is observed + data is missing
    ):
        self.data = data
        
        self.learner = GPFALearner(torch.tensor(self.data.drop("T", axis=1).to_numpy()), torch.tensor(self.data["T"].to_numpy()))

        self.T = T
        
    def predict(self,
               tidy = True, # return prediction in tidy format or raw prediction
               ):
        self.learner.train()
        self.pred = self.learner.predict(self.T)
        
        self._tidy_pred() if tidy else self.pred
        
    def _tidy_pred(self):
        """ transform the pred output into a tidy dataframe suitable for plotting"""
        feature_names = self.data.columns.drop("T")

        pred_mean = pd.DataFrame(self.pred.mean, columns = feature_names).assign(T = self.T).melt("T", value_name="mean")
        pred_std = pd.DataFrame(self.pred.std, columns = feature_names).assign(T = self.T).melt("T", value_name="std")
        
        pred = pd.merge(pred_mean, pred_std, on=['T', 'variable'])        
        
        self.pred_tidy = pred 
        return pred 
    
